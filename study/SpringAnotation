# Anotation

- [ ]  Anotation은 사전적으로 “주석”이라는 의미를 가지고 있으며, 자바 코드에 @를 이용해 주석처럼 달아 특별한 의미, 기능을 수행하도록 하는 기술이다.

### Anotation의 용도

1. 컴파일러에게 코드 작성 문법 에러를 체크하도록 정보를 제공
2. 빌드나 배치시에 코드를 자동으로 생성할 수 있도록 정보를 제공
3. 실행 시 특정 기능을 실행하도록 정보를 제공

### Anotation의 사용 순서

1. Anotation을 정의한다.
2. 클래스에 Anotation을 배치한다.
3. 코드가 실행되는 중 Reflection 을 이용하여 추가 정보를 획득하여 기능을 실시한다.
    1. Reflection 이란?
        1. 프로그램이 실행 중에 자신의 구조와 동작을 검사, 조사, 수정 하는 것
        2. 프로그래머가 데이터를 보여주고, 다른 포맷의 데이터를 처리하고, 통신을 위해 serialization(직렬화)를 수행하고, bundling을 하기 위해 일반 소프트웨어 라이브러리를 만들도록 도와 줌
        3. 객체지향 프로그래밍 언어에서 사용할 경우 컴파일 타임에 인터페이스, 필드, 메소드의 이름을 알지 못해도 실행 중에 클래스, 인터페이스, 필드 및 메소드에 접근 가능
        4. 새로운 객체의 인스턴스화 및 메소드 호출을 허용
        5. 객체지향 프로그래밍 언어에서 Reflection을 사용해 멤버 접근 가능성 규칙을 무시 가능
        6. Spring에서 BeanFactory라는 Container에서 객체가 호출되면 객체의 인스턴스를 생성하게 되는데 이 때 쓰임. 프레임워크에서 유연성 있는 동작을 위해 쓰임
        7. Anotation 자체는 아무런 동작을 가지지 않는 단순한 표식일 뿐이지만, Reflection을 이요하면 Annotation의 적용 여부와 엘리먼트 값을 읽고 처리할 수 있음
        8. Class에 적용된 Annotation 정보를 읽으려면 java.lang.Class를 이용하고 필드, 생성자, 메소드에 적용된 어노테이션 정보를 읽으려면 Class의 메소드를 통해 java.lang.reflect 패키지의 배열을 얻어야 함.
        9. Reflection을 이용하면 Annotation 지정만으로도 원하는 클래스를 주입할 수 있다.

### Anotation의 종류

1. @ComponentScan
    1. @Component, @Service, @Repository, @Controller, @Configuration이 붙은 클래스 Bean들을 찾아서 Context에 bean 등록을 해주는 Annotation이다.

        ```java
        @Component
        public class Student {
            public Student() {
                System.out.println("hi");
            }
        }

        @Component(value="mystudent")
        public class Student {
            public Student() {
                System.out.println("hi");
            }
        }
        ```

    2. @Component Annotation이 있는 클래스에 대하여 bean 인스턴스를 생성한다.
    3. ApplicationContext.xml에 `<bean id="abc" class="abc" />` 과 같이 xml에 bean을 직접등록하는 방법도 있다.
    4. @Component로 다 쓰지 않고 @Repository, @Service, @Controller등을 사용하는 이유는 @Repository는 DAO의 메소드에서 발생할 수 있는 unchecked exception들을 스프링의 DataAccessException으로 처리할 수 있기 때문이다.
    5. 자동으로 등록되는 Bean의 이름은 클래스의 첫문자가 소문자로 바뀐 이름이 적용된다.
2. @Component
    1. 개발자가 직접 작성한 Class를 Bean으로 등록하기 위한 Annotation이다.
    2. Component에 대한 추가 정보가 없다면 Class의 이름을 카멜케이스로 변경한 것이 Bean id로 사용된다.
    3. @Bean과는 다르게 @Component는 name이 아닌 value를 이용해 Bean의 이름을 지정한다.
3. @Bean
    1. 개발자가 직접 제어가 불가능한 외부 라이브러리 등을 Bean으로 만들려할 때 사용되는 Anotation.

        ```java
        @Configuration
        public class ApplicationConfig {
            @Bean
            public ArrayList<String> array(){
                return new ArrayList<String>();
            }
        }
        ```

    2. ArrayList같은 라이브러리등을 Bean으로 등록하기 위해서는 별도로 해당 라이브러리 객체를 반환하는 Method를 만들고 @Bean Annotation을 사용하면 된다.
    3. @Bean에 name이라는 값을 이용하면 자신이 원하는 id로 Bean을 등록할 수 있다.

        ```java
        @Bean(name="원하는 id")
            public ArrayList<String> array(){}
        ```

4. @Autowired
    1. 속성(field), setter method, constructor(생성자)에서 사용하며 Type에 따라 알아서 Bean을 주입 해준다.
    2. Spring이 자동적으로 값을 할당한다.
    3. Controller 클래스에서 DAO나 Service에 관한 객체들을 주입 시킬 때 많이 사용된다.
    4. Annotation을 이용한 방식
        1. 바로주입(Container에 Boy와 일치하는 타입이 있으면 주입 요청
        2. singleton이므로 bean이 하나만 만들어지므로 자동 주입 가능
    5. xml 이용
        1. 취소선 표시 부분 필요
        2. setter method와 필드 이름과 객체 이름에 대한 property
    6. Bean을 주입받는 방식 3가지는
        1. @Autowired
        2. setter
        3. 생성자(@AllArgsConstructor 사용) → 권장방식
5. @Controller
    1. Spring의 Controller를 의미한다. Spring MVC에서 Controller클래스에 쓰인다.
6. @RestController
    1. Spring에서 Controller 중 View로 응답하지 않는, Controller를 의미한다.
    2. method의 반환 결과를 JSON 형태로 반환한다.
    3. 이 Annotation이 적혀있는 Controller의 method는 HttpResponse로 바로 응답이 가능하다.@ResponseBody 역할을 자동적으로 해주는 Annotation이다.*@Controller + @ResponseBody를 사용하면 @ResponseBody를 모든 메소드에서 적용한다.*
7. @Controller 와 @RestController 의 차이
    1. @ControllerAPI와 view를 동시에 사용하는 경우에 사용한다.대신 API 서비스로 사용하는 경우는 @ResponseBody를 사용하여 객체를 반환한다.view(화면) return이 주목적이다.
    2. @RestControllerview가 필요없는 API만 지원하는 서비스에서 사용한다.*Spring 4.0.1부터 제공*@RequestMapping 메서드가 기본적으로 @ResponseBody 의미를 가정한다.data(json, xml 등) return이 주목적이다.
    3. **즉, @RestController = @Controller + @ResponseBody 이다.**
8. @Service
    1. Service Class에서 쓰인다.비즈니스 로직을 수행하는 Class라는 것을 나타내는 용도이다.
9. **@Resource**
    1. @Autowired 와 쓰임이 비슷하지만 타입이 아닌 이름으로 연결된다는 차이점이 있다.
    2. Ex) **@Resource(name="bean 이름")**
10. @Value
    1. 프로퍼티에서 값을 가져와 주입한다.

        ```java
        @Value("$system.mail.from}")
        private String mailFrom;
        ```

11. @RequestMapping
    1. 요청받은 URL 을 어떤 메소드가 처리할 지 매핑해주는 역할을 한다.
    2. 요청 받는 형식을 정의하지 않는다면, 자동적으로 GET으로 설정된다.

        ```java
        @RestController
        @RequestMapping(value = "/home")
        public class ProjectController {

            // ... logic area
         }
        ```

12. @PathVariable
    1. method parameter 앞에 사용하면서 해당 URL에서 {특정값}을 변수로 받아 올 수 있다.

        ```java
        @PostMapping("/index/{idx}")
        @ResponseBody
        public boolean deletePost(@PathVariable("idx") int postNum) {
        return postService.deletePost(postNum);
        }
        ```

        위의 경우 GET /user/{userId}/invoices?date=190101 와 같이 uri가 전달될 때 구분자 {userId}

        는 @PathVariable(“userId”) 로, 뒤에 이어붙은 parameter는 m@RequestParam(“date”)로 받아온다.

13. @RequestBody
    1. 요청이 온 데이터(JSON이나 XML형식)를 바로 Class나 model로 매핑하기 위한 Annotation이다.
    2. POST나 PUT, PATCH로 요청을 받을때에, 요청에서 넘어온 body 값들을 자바 타입으로 파싱해준다.
    3. HTTP POST 요청에 대해 request body에 있는 request message에서 값을 얻어와 매핑한다.RequestData를 바로 Model이나 클래스로 매핑한다.
    4. 이를테면 JSON 이나 XML같은 데이터를 적절한 messageConverter로 읽을 때 사용하거나 POJO 형태의 데이터 전체로 받는 경우에 사용한다.

    ```java
    @RequestMapping(value = "/book", method = RequestMethod.POST)
    public ResponseEntity<?> someMethod(@RequestBody Book book) {
    // we can use the variable named book which has Book model type.
    try {
       service.insertBook(book);
    } catch(Exception e) {
        e.printStackTrace();
    }
    // return some response here
    }
    ```

14. @RequestParam
    1. @PathVariable과 비슷하다.request의 parameter에서 가져오는 것이다. method의 파라미터에 사용된다.?moviename=thepurge 와 같은 쿼리 파라미터를 파싱해준다.
    2. HTTP GET 요청에 대해 매칭되는 request parameter 값이 자동으로 들어간다.url 뒤에 붙는 parameter 값을 가져올 때 사용한다.

    ```java
    @RequestMapping(value = "/search/movie", method = RequestMethod.GET)
    public ResponseEntity<?> someMethod(@RequestParam String moviename) {
    // request URI would be like '/search/movie?moviename=thepurge'
    try {
       List<Movie> movies = service.searchByMoviename(moviename);
    } catch(Exception e) {
       e.printStackTrace();
    }
    // return some response here
    }
    ```