- 2.1 JPA

    데이터베이스 처리 작업 도구, 관계형 데이터베이스 매핑해주는 도구, 즉 자바 객체를 SQL을 통해 데이터베이스에 관리하게 하고 데이터베이스에 저장된 데이터를 자바 어플리케이션에서 사용하려면 SQl을 통해 다시 자바 객체로 변환하는 반복적인 작업을 해아함 이를 해결하기 위해 나온 기술이 ORM이고, 객체는 객체지향적으로 데이터베이스는 데이터 베이스대로 설계하고 중간에서 ORM이 매핑을 도와줌

    - JPA 장점
        - 특정 데이터베이스에 종속되지 않는다
            - JPA는 추상화한 데이터 접근계층을 제공하기에 설정파일에 어떤 데이터베이스인지만 알려주어도 oracle, mysql, maria 등 자유롭게 변경가능하다.
        - 객체지향적이다.
        - 생성성 향상
            - 테이블에 새로운 컬럼이 추가되었을 때 DTO클래스의 필드도 모두 변경해야하는데 JPA를 사용할 경우 테이블과 매핑된 클래스에 필드만 추가한다면 쉽게 관리가 가능하다.
    - JPA 단점
        - 복잡하다.
        - 매핑 설계를 잘못할경우 성능저하의 위험이 있다.
        - 학습 시간이 오래걸린다.
    - JPA의 동작 방식

        ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/3f0bf071-79e1-4388-a29f-9410cfc87694/Untitled.png)

        - Entity Manager Factory
            - 엔티티 매니저 인스턴스를 관리하는 주체이다. 애플리케이션  실행 시 한개만 만들어지며 사용자로부터 요청이 오면 엔티티 매니저 팩토리로부터 엔티티 매니저를 생성한다.
        - Entity Manager
            - **영속성 컨텍스트**에 접근하여 엔티티에 대한 데이터베이스 작업을 제공한다. 내부적으로 데이터베이스 커넥션을 사용해 데이터베이스에 접근한다.
            - 엔티티 매니저 메소드 종류
                1. find() : 영속성 컨텍스트에서 엔티티를 검색하고 영속성 컨텍스트에 없을 경우 데이터베이스에서 데이터를 찾아 영속성 컨텍스트에 저장한다.
                2. persist() : 엔티티를 영속성 컨텍스트에 저장한다.
                3. remove() : 엔티티 클래스를 영속성 컨텍스트에서 삭제한다.
                4. flush() : 영속성 컨텍스트에 저장된 내용을 데이터베이스에 반영한다.
            - 영속성 컨텍스트 설명 태그

                엔티티를 영구 저장하는 환경으로 엔티티 매니저를 통해 영속성 컨텍스트에 접근한다.

                1. 엔티티 생명주기

                    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/5c561769-ff76-4562-994f-1b0525cf8384/Untitled.png)

                    1. 비영속(new) : new 키워드를 통해 생성된 상태로 영속성 컨텍스트와 관련이 없는 상태
                    2. 영속(Managed) : 엔티티 영속성 컨텍스트에 저장된 상태로 영속성 컨텍스트에 의해 관리되는 상태, 영속 상태에서 데이터베이스에 저장되지 않으며, 트랜젝션 커밋 시점에 데이터베이스에 반영
                    3. 준영속 상태(detached) : 영속성 컨텍스트에 엔티티가 저장되었다가 분리된 상태
                    4. 삭제 상태(removed) 영속성 컨텍스트와 데이터베이스에서 삭제된 상태
                2. 엔티티 코드로 설명

                    ```java
                    /*65p 1. 영속성 컨텍스트에 저장할 상품 엔티티를 하나 생성한다.
                    new키워드를 통해 생성했으므로 영속성 컨텍스트와 관련이 없는 상태.*/
                    Item item = new Item();//65p 1.
                    item.setItemNm("테스트 상품");

                    /*65p 2. 엔티티 매니저 팩토리로부터 엔티티 매니저 생성*/
                    EntityManager em = entityManagerFactory.createEntityManager();//65p 2.

                    /*65p 3. 엔티티 매니저는 데이터 변경 시 데이터의 무결성을 위해 반드시
                    트랜잭션을 시작해야 한다. 여기서의 트랜잭션도 데이터베이스의 트랜잭션
                    이라생각하면 된다.*/
                    EntityTransaction transaction = em.getTransaction();//65p 3.
                    transaction.begin();
                    /*65p 4. 생성한 상품 엔티티가 영속성 컨텍스트에 저장된 상태이다. 여기
                    까지는 데이터베이스에 INSeRT SQL을 보내지 않는 단계이다.*/
                    em.persiste(item);//65p 4.
                    /*65p 5. 트랜잭션을 데이터베이스에 반영한다. 이때 영속성 컨텍스트에
                    저장된 상품정보가 데이터베이스 INSERT 되면서 반영된다.*/
                    transaction.commit();//65p 5.
                    /*65p 6.7. 엔티티 매니저와 엔티티 매니저 팩토리의 close() 메소드 호출해
                    사용 자원을 반환한다.*/
                    em.close();//65p 6.
                    emf.close();//65p 7.
                    ```

                3. 영속성 컨텍스트 사용 시 이점

                애플리케이션과 데이터베이스 사이에 영속성 컨텍스트라는 중간 계층을 만들면 버퍼링, 캐싱등을 할 수 있는 장점이 있다.

                ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/14862d21-1819-4980-977d-06f693b2d5ee/Untitled.png)

                - 1차 캐시(@Id, Entity부분)
                    - 영속성 컨텍스트에는 1차 캐시가 존재하며 Map<KEY,VALUE>로 저장된다. entityManager.find()메소드 호출 시 영속성 컨텍스트의 1차 캐시를 조회한다. 엔티티가 존재할 경우 해당 엔티티를 반환하고, 엔티티가 없으면 데이터베이스에서 조회 후 1차 캐시에 저장 및 반환한다.
                - 동일성 보장
                    - 하나의 트랜잭션에서 같은 키값으로 영속성 컨텍스트에 저장된 엔티티 조회 시 같은 엔티티 조회를 보장한다. 바로 1차 캐시에 저장된 엔티티를 조회하기 때문에 가능하다
                - 트랜잭션을 지원하는 쓰기 지연

                    ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/57013300-b01e-4d46-a960-d324125fc697/Untitled.png)

                    - 영속성 컨텍스트에는 쓰기 지연 SQL 저장소가 존재한다. entityManager.persist()를 호출하면 1차 캐시에 저장되는 것과 동시에 쓰기 지연 SQL 저장소에 SQL문이 저장된다. 이렇게 SQL을 쌓아두고 트랜잭션을 커밋하는 시점에 저장된 SQL문들이 flush되며 데이터베이스에 반영된다. 모아 보내기 때문에 성능면에서 이점이 된다.
                - 변경 감지
                    - JPA는 1차 캐시에 데이터베이스에서 처음 불러온 엔티티 스냅샷 값을 갖고 있다. 그리고 1차 캐시에 저장된 엔티티와 스냅샷을 비교 후 변경 내용이 있다면 UPDATE SQL문을 쓰기 지연 SQL에 담아두고 데이터베이스 커밋 시점에 변경 내용을 자동 반영한다.