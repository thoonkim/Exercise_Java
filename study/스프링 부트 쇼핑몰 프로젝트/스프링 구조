- [eBook]실전 스프링 부트 웹 개발 Thymeleaf + JPA + MySQL 개정판 [EPUB]
    - 2장 스프링 구조
        - 2.2 프로젝트 파일 구성

            ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/6bf8f472-5e58-44c2-b1bf-886dd5780588/Untitled.png)

            - [ ]  구성 요소
                - pom.xml
                    - 메이븐 프로젝트 빌드 파일
                - src/main/java
                    - 자바 소스 경로
                - src/main/java/DevProjectApplication.java
                    - 애플리케이션을 시작하기 위한 스프링 구성 메인 클래스 소스 파일
                - src/main/resources
                    - 리소스 파일 경로
                - src/main/resources/application.properties
                    - 애플리케이션에서 사용할 여러 가지 프로퍼티(property) 정의
                - src/main/resources/static
                    - 스타일 시트, 자바스크립트, 이미지 등의 정적 리소스 파일 경로
                - src/main/resources/templates
                    - 뷰 템플릿(Thymeleaf) 파일 경로
        - 2.5 스프링 MVC 구조

            ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/25b94441-7a86-40cb-b704-eb847c0a9cf9/Untitled.png)

            - [ ]  스프링 MVC 처리 흐름
                1. 클라이언트의 요청이 DispatcherServlet에 전달
                2. DispatcherServlet은 HandlerMapping 을 사용, 클라이언트의 요청을 처리할 Controller 객체를 찾음
                3. 리턴
                4. Dispatcher Servlet은 컨트롤 객체의 handleRequst() 메소드를 호출해 클라이언트의 요청을 처리함
                5. ModelAndView 리턴
                6. Controller의 실행 결과를 보여줄 ViewName 검색
                7. 리턴
                8. DispatcherServlet은 해당 View에 Model을 전달
                9. View는 Model을 참조해 응답을 생성
                10. 생선된 응답을 클라이언트에 반환
    - 3장 : 롬복
        - 3.2 롬복 - 자바빈즈

            ### 자바빈즈

            - 자바빈즈(JavaBeans)는 자바로 작성된 소프트웨어 컴포넌트 이다.
            - 현재 개발되었거나 되고 있는 프로그램들은 모두 MVC(Model-View-Controller(JavaBeans)) 기법에 의해 개발되어 지고 있다.
            - 자바빈즈 클래스로서 작동하기 위해서, 객체 클래스는 명명법, 생성법 그리고 행동에  관련된 일련의 관례를 따라야 한다.
                - 클래스는 [**직렬화**](https://www.notion.so/ad0aeef061fa465ab68cd988a78d851f) 되야 한다.
            - 반드시 직렬화 할 필요는 없으나 미리구현해 두는 것이 무난하다.
        - 3.3 롬복 애너테이션


            | @애너테이션 | 설명 |
            | --- | --- |
            | @Getter / Setter | 게터 세터 생성 |
            | @ToString | toString() 메서드 생성 |
            | @EqualsAndHashCode | equals,hashcode(내용)(객체)같은지 확인 |
            | @NoArgsConstructor | 파라미터가 없는 기본 생성자를 생성 |
            | @RequiredArgsConstructor | final이나 @Nonnull인 필드 값만 파라미터로 받는 생성자 |
            | @AllArgsConstructor | 모든 필드 값을 파라미터로 받는 생성자 |
            | @Data | @ToString,@Getter / Setter,@EqualsAndHashCode,@RequiredArgsConstructor 애너테이션을 합친 애너테이션 |
            | @Builder | 빌더패턴을 사용할 수 있도록 코드를 생성 |
            | @Log | 자동으로 생기는 log라는 변수를 이용해 로그를 출력 |
    - 4장 : 컨트롤러 요청 [**매핑**](https://www.notion.so/2c34a0a0a823472d8a8ea4803dad335d)
        - 4.1 컨트롤러 요청 매핑

            ### 요청 경로 매핑

            - @RequestMapping의 value 속성에 요청 경로를 설정한다.
                - 요청 경로는 반드시 설정해야하는 필수 정보다
                - 속성이 하나일 때는 속성명을 생략할 수 있다.
                - 컨트롤러의 클래스 레벨과 메서드 레벨로 지정할 수 있다.
                - 클래스 레벨로 요청 경로를 지정하면 메서드 레벨에서 지정한 경로의 기본 경로로 취급된다.
                - 클래스 레벨의 요청 경로에 메서드 레벨의 요청 경로를 덧붙인 형태가 최종 경로가 된다.
                    1. @RequestMapping
                        1. 요청받은 URL 을 어떤 메소드가 처리할 지 매핑해주는 역할을 한다.
                        2. 요청 받는 형식을 정의하지 않는다면, 자동적으로 GET으로 설정된다.

                            ```java
                            @RestController
                            @RequestMapping(value = "/home")
                            public class ProjectController {

                                // ... logic area
                             }
                            ```


        - 4.2 경로 패턴 매핑

            ### 경로 패턴 매핑

            - 요청 경로를 동적으로 표현이 가능한 경로 패턴으로 지정할 수 있다.
                - URL 경로 상의 변하는 값을 경로 변수로 취급한다.
                - 경로 변수에 해당하는 값을 파라미터 변수에 설정할 수 있다.
                - @PathVariable를 메서드 매개변수(파라미터)에 지정하면 경로 변수값을 받아올 수 있다.

                ```java
                @RequestMapping("board")
                public class BoardController{

                	@RequestMapping("/read/{boardNo}")
                	public String read(@PathVariable int boardNo){
                	//경로가 변하므로 뷰 이름을 retrun으로 지정한다
                	retrun "board/read";
                	}
                }
                ```

        - 4.3 Http 메서드 매핑

            ### Http 메서드 매핑

            - method 속성을 사용하여 HTTP 메서드를 매핑 조건으로 지정할 수 있다.
            - 화면으로 응답하는 경우에는 HTTP 메서드로 GET 방식과 POST 방식 두가지를 사용할 수 있다. RESTful 웹서비스에서는 제약없이 다양한 HTTP 메서드 사용이 가능하다
            - @RequestMapping의 HTTP 메서드별 단축 변형도 존재한다
                - @GetMapping
                - @PostMapping
                - @PutMapping
                - @DeleteMapping
                - @PatchMapping

                ```java
                @RequestMapping("/board")
                public class BoardController {

                	@RequestMapping(path = "/register", method = RequestMethod.GET)
                return "success";
                	}
                ```

                ```java
                <form th:action="@{/board/register}" method="post" or "get">

                ```

        - 4.4 Params 매핑

            ### Params 매핑

            - 요청 파라미터를 매핑 조건으로 지정하는 경우에는 params 속성을 사용한다.
            - 버튼이나 링크에 따라 호출할 메서드를 바꿔야 할 때 사용한다.

            요청과 매핑

            - [ ]  /border/get 경로, GET 방식, “register” 요청 파라미터

            ```java
            @PostMapping(path = "/post", params="modify")
            	public String modify() {
            		log.info("modify");

            		return "board/list";
            	}

            <a th:href="@{/board/get?register}">Register</a>
            ```

    - 5장 : 컨트롤러 응답
        - 5.1 void 타입

            ### void 타입

            - 호출하는 URL과 동일한 뷰 이름을 나타내기 위해 사용된다.
            - [**RESTfull**](https://www.notion.so/640ace4117d748fcba2e2fc42705c9e2) 웹 서비스 개발에서는 내용이 없는 응답 본문을 반환하는 용도로 사용한다.

            ```java
            @GetMapping("/goHome0101")
            	public void home0101() {
            		log.info("home0101");
            	}
            ```

            - [ ]  요청경로 goHome0101 와 동일한 뷰 goHome0101.html를 가르킨다
        - 5.2 String 타입

            ### String 타입

            - 뷰 파일의 경로와 파일 이름을 나타내기 위해 사용한다.
            - RESTful 웹 서비스 개발에서는 단순 문자열 내용을 가진 응답 본문을 반환하는 용도로 사용한다.

            REST

        - 5.3 자바빈즈 클래스 타입

            ### 자바빈즈 클래스 타입

            - JSON 객체 타입의 데이터를 만들어서 반환하는 용도로 사용한다.
            - @ResponseBody를 지정하지 않으면 에러가 발생한다.

                ```java
                @Slf4j
                @Controller
                public class HomeController {

                	@ResponseBody
                	@GetMapping("/goHome0301")
                	public Member home0301() {
                		log.info("home0301");

                		Member member = new Member();

                		return member;
                	}

                }
                ```

                - [ ]  반환 값이 객체 타입이면 JSON타입으로 자동 변환한다.
        - 5.4 컬렉션 List 타입

            ### 컬렉션 List 타입

            - JSON 객체 배열 타입의 데이터를 만들어서 반환하는 용도로 사용.
            - 반환값이 컬렉션 List 타입이면 JSON 객체 배열 타입으로 자동으로 변환한다.

                ```java
                @Slf4j
                @Controller
                public class HomeController {

                	@ResponseBody
                	@GetMapping("/goHome04")
                	public List<Member> home04() {
                		log.info("home04");

                		List<Member> list = new ArrayList<Member>();

                		Member member = new Member();
                		list.add(member);

                		Member member2 = new Member();
                		list.add(member2);

                		return list;
                	}

                }
                ```

                ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/8b86860f-fa5c-4b6a-a82d-8f9d0696e6b1/Untitled.png)

        - 5.5 컬렉션 Map 타입

            ### 컬렉션 Map 타입

            - Map 형태의 컬렉션 자료를 JSON 객체 타입의 데이터로 만들어서 반환하는 용도로 사용한다.
            - 반환값이 컬렉션 Map 타입이면 JSON 객체 타입으로 자동변환된다.

            ```java
            @Slf4j
            @Controller
            public class HomeController {

            	@ResponseBody
            	@GetMapping("/goHome05")
            	public Map<String, Member> home05() {
            		log.info("home05");

            		Map<String, Member> map = new HashMap<String, Member>();

            		Member member = new Member();
            		map.put("key1", member);

            		Member member2 = new Member();
            		map.put("key2", member2);

            		return map;
            	}

            }
            ```

            ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/c86dd586-75c8-4e47-b3c9-5d3e8b4b4e11/Untitled.png)

        - ResponseEntity


            위의 타입들이 존재하고 +α 로 200ok 상태코드를 반환

            # **ResponseEntity**

            *ResponseEntity* 도 마찬가지로 *HTTP* 응답을 빠르게 만들어주기 위한 객체입니다. *@ResponseBody* 와 달리 *Annotation* 이 아닌 객체로 사용이 됩니다. 즉, 응답으로 변환될 정보를 모두 담은 요소들을 객체로 만들어서 반환해줍니다. 객체의 구성요소에서 *HttpMessageConverter* 는 응답이 되는 본문을 처리해준 뒤에, *RESTTemplate* 에 나머지 구성 요소인 *Status* 를 넘겨주게 됩니다. 이를 통하여 앞서 언급한 문제점들을 해결할 수가 있는데, 선언된 구조부터 살펴보도록 하겠습니다.

            `//ResponseEntity 선언 구조
            public class ResponseEntity extends HttpEntity {

              private final Object status;
            }`

            먼저, *ResponseEntity* 의 구조를 보게 되면, 다음과 같이 *Status* 만 필드 값으로 가지고 있습니다. *ResponseEntity* 에서 직접적으로 *Status Code* 를 지정할 수 있다는 것을 의미합니다. 나머지 부분은 *HttpEntity* 에 구현이 되어있는데, 이는 *RequestEntity* 와 여러 설정들을 공유하기 때문입니다. 다음은 *HttpEntity* 의 구현 부분을 보도록 하겠습니다.

            `//HttpEntity 선언 구조
            public class HttpEntity<T> {
                public static final HttpEntity<?> EMPTY = new HttpEntity<>();


                private final HttpHeaders headers;

                @Nullable
                private final T body;
            }`

            이와 같이 *ResponseEntity* 는 *HttpEntity* 를 상속하여 구현이 됩니다. *HttpEntity* 에서는 *Generic* 타입으로 *Body* 가 될 필드 값을 가질 수가 있습니다. *Generic* 타입으로 인하여 바깥에서 *Wrapping* 될 타입을 지정할 수가 있습니다. *Wrapping* 된 객체들은 자동으로 *HTTP* 규격에서 *Body* 에 들어갈 수 있도록 변환이 됩니다. 또한, 필드 타입으로 *HttpHeaders* 를 가지고 있는데, 이는 *ResponseBody* 와 다르게 객체 안에서 *Header* 를 설정해 줄 수 있음을 암시합니다.*Constructor* 를 활용하여 *ResponseEntity* 를 사용한 예시는 다음과 같습니다.

            `public ResponseEntity<MoveResponseDto> move(@PathVariable String name,
                @RequestBody MoveDto moveDto) {
                HttpHeaders headers = new HttpHeaders();
                headers.set("Game", "Chess");

                String command = makeMoveCmd(moveDto.getSource(), moveDto.getTarget());
                springChessService.move(name, command, new Commands(command));

                MoveResponseDto moveResponseDto = new MoveResponseDto(springChessService
                    .continuedGameInfo(name), name);

                return new ResponseEntity<MoveResponseDto>(moveResponseDto, headers, HttpStatus.valueOf(200)); // ResponseEntity를 활용한 응답 생성
            }`

            *Spring* 에서 다음과 같이 *HTTP* 응답으로 반환할 메서드를 만들게 되었습니다. 이 때, 타입은 *ResponseEntity<반환할 타입>* 으로 지정합니다. *Constructor* 를 사용시에 *Body* 부분, *Header* 그리고 상태로 지정될 *Status* 를 차례로 입력하여 생성하시면 됩니다. 예시 코드에서는 moveResponseDto라는 객체가 *Body* 부분에 들어가서 응답으로 전송이 됩니다. 우리는 *HTTP* 응답에 필요한 요소들 중 대표적인 *Status*, *Header* , *Body* 를 지정하여 응답을 만들 수가 있습니다.

            # **Constructor보다는 Builder**

            이렇게 *ResponseEntity* 를 사용할 때, *Constructor* 를 사용하기보다는 *Builder* 를 활용하는 것을 권장하고 있습니다. 그 이유는 숫자로 된 상태 코드를 넣을 때, 잘못된 숫자를 넣을 수 있는 실수 때문입니다. 따라서, *Builder Pattern* 를 활용하면 다음과 같이 코드를 변경할 수가 있습니다.

              `return new ResponseEntity<MoveResponseDto>(moveResponseDto, headers, HttpStatus.valueOf(200));

              return ResponseEntity.ok()
                    .headers(headers)
                    .body(moveResponseDto);`

            이렇게 *Builder Pattern* 을 활용하면 각 상태에 매칭되는 숫자 코드를 외울 필요 없이 *Builder* 메소드를 선택하면 됩니다.

            # **마치며**

            *Spring* 또한 *HTTP* 에 맞는 응답을 클라이언트에게 제공을 해주어야 합니다. *Header* 설정에서의 유연성을 가진 *ResponseEntity* 를 사용하여, 빠르면서도 실수를 줄이는 *HTTP* 응답을 구현할 수 있습니다.

            [https://tecoble.techcourse.co.kr/post/2021-05-10-response-entity/](https://tecoble.techcourse.co.kr/post/2021-05-10-response-entity/)

    - 6장 : 컨트롤러 메서드 파라미터
        - 6.1 컨트롤러 메서드 파라미터

            ### 컨트롤러 메서드 파라미터

            - 주요 파라미터
                - Model
                    - 이동 대상에 전달할 데이터를 가지고 있는 인터페이스
                - RedirectAttributes
                    - 리다이렉트 대상에 전달할 데이터를 가지고 있는 인터페이스
                - 자바빈즈 클래스
                    - 요청 파라미터를 가지고 있는 자바빈즈 클래스
                - MultipartFile
                    - 멀티파트 요청을 사용해 업로드된 파일 정보를 가지고 있는 인터페이스
                - BindingResult
                    - 도메인 클래스의 입력값 검증 결과를 가지고 있는 인터페이스
                - java.util.Locale
                    - 클라이언트 로캐일
                - java.security.Principal
                    - 클라이언트 인증을 위한 사용자 정보를 가지고 있는 인터페이스
            - 지원되는 컨트롤러 메서드 파라미터

                ![Untitled](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/35907035-eeaa-4596-a0eb-e844a93f64e6/Untitled.png)

        - 6.2 요청 처리

            ### 요청 처리

            - 스프링 MVC는 요청 데이터를 가져올 수 있는 다양한 방법을 제공한다.
            - 컨트롤러 파라미터명
                - 자바소스를 컴파일할 때 -g(디버깅 정보 출력 모드)을 사용해야 파라미터명을 인식할 수 있다. 만약에 그럴 수 없다면 value(name)속성을 지정한 애너테이션(@RequestParam,@PathVariable)을 사용해야 한다.

            - 요청과 처리
                - URL 경로 상의 쿼리 파라미터 정보로부터 요청 데이터를 취득할 수있다.

                - HTml 폼 필드명과 컨트롤러 파라미터명이 일치하면 요청 데이터를 취득할 수 있다.

                ```java
                <form th:action="@{/register01}" method="post">
                		userId: <input type="text" name="userId" value="hongkd"><br>
                		password: <input type="password" name="password" value="1234"><br>
                		coin: <input type="text" name="coin" value="100"><br>
                		<input type="submit" value="register01">
                	</form>

                @PostMapping("/register01")
                	public String register01(String userId) {
                		log.info("register01");

                		log.info("userId = " + userId);

                		return "success";
                	}
                ```

                - HTML 폼 필드가 여러 개일 경우에도 컨트롤러 파라미터명이 일치하면 요청 데이터를 취득할 수 있다.
                - HTML 폼 필드가 여러 개일 경우에 컨트롤러 파라미터의 위치는 상관 없다.
                - HTML 폼 필드값이 숫자일 경우에는 컨트롤러 파라미터 타입이 문자열이면 그대로 문자열 형태로 요청 데이터를 취득한다.
                - HTML 폼 필드값이 숫자일 경우에는 컨트롤러 파라미터 타입이 숫자형이면 숫자로 타입변환하여 요청 데이터를 취득한다.
        - 6.3 요청 데이터 처리 애너테이션

            ### 주요 애너테이션

            - @PathVariable
                - URL에서 경로 변수 값을 가져오기 위한 애너테이션
            - @RequestParam
                - 요청 파라미터 값을 가져오기 위한 애너테이션
            - @RequestHeader
                - 요청 헤더 값을 가져오기 위한 애너테이션
            - @RequestBody
                - 요청 본문 내용을 가져오기 위한 애너테이션
            - @CookieValue
                - 쿠키 값을 가져오기 위한 애너테이션

            ### 요청과 처리

            - URL 경로 상의 경로 변수로부터 요청 데이터를 취득할 수 있다.

            ```java
            @GetMapping("/register/{userId}")
            	public String registerByPath(String userId) {
            		log.info("registerByPath");

            		log.info("userId = " + userId);

            		return "success";
            	}

            <a th:href="@{register/hongkd}">register/hongkd</a> <br>
            ```

            - URL 경로 상의 경로 변수가 여러 개일 때 @PathVariable 애너테이션을 사용하여 특정한 경로 변수명을 지정한다.

            ```java
            @GetMapping("/register/{userId}/{coin}")
            	public String registerByPath(@PathVariable("userId") String userId, @PathVariable("coin") int coin) {
            		log.info("registerByPath");

            		log.info("userId = " + userId);

            		log.info("coin = " + coin);

            		return "success";
            	}

            <a th:href="@{register/hongkd/100}">register/hongkd/100</a> <br>
            ```

            - HTML [**폼의 필드명**](https://www.notion.so/d08111dd4aa146b5995ef70f86f570fd)과 컨트롤러 파라미터명이 일치하면 요청을 처리할 수 있다.

            ```java
            @PostMapping("/register01")
            	public String register01(String userId) {
            		log.info("register01");

            		log.info("userId = " + userId);

            		return "success";
            	}

            <form th:action="@{/register01}" method="post">
            		userId: <input type="text" name="userId" value="hongkd"><br>
            		password: <input type="password" name="password" value="1234"><br>
            		coin: <input type="text" name="coin" value="100"><br>
            		<input type="submit" value="register01">
            	</form>
            ```

            - HTML 폼의 필드명과 컨트롤러 파라미터명이 일치(대소문자구분)하지 않으면 요청을 처리할 수 없다.
            - @RequestParam 애너테이션을 사용하여 특정한 HTML 폼의 필드명을 지정하여 요청을 처리한다.

            ```java
            @PostMapping("/register0202")
            	public String register0202(@RequestParam("userId")String username) {
            		log.info("register0202");

            		log.info("userId = " + username);

            		return "success";
            	}

            <form th:action="@{/register0202}" method="post">
            		userId: <input type="text" name="userId" value="hongkd"><br>
            		password: <input type="password" name="password" value="1234"><br>
            		coin: <input type="text" name="coin" value="100"><br>
            		<input type="submit" value="register0202">
            	</form>
            ```

        - 6.4 요청 처리 자바빈즈

            ### 요청과 처리

            - 폼 텍스트 필드 요소값을 자바빈즈 파라미터로 처리한다.
    - 12장 : 의존성 주입
        - 12.1 의존성 주입 설명
        - 12.2 필드 기반 의존성 주입
        - 12.3 생성자 기반 의존성 주입
        - 12.4 세터 기반 의존성 주입
        - 12.5 자동 연결



        ### 의존성 주입 설명

        - Dependency 의존관계란?
            - A가 B를 의존한다. 즉 의존대상 B가 변하면, 그것이 A에 영향을 미친다.
                - 즉 B의 기능이 추가 또는 변경되거나 형식이 바뀌면 그 영향이 A에 미친다.
            - 예 ) 요리사는 레시피에 의존한다.

            ```java
            class BurgerChef {
                private HamBurgerRecipe hamBurgerRecipe;

                public BurgerChef() {
                    hamBurgerRecipe = new HamBurgerRecipe();
                }
            }
            ```


        ### 의존관계를 인터페이스로 추상화하기

        - 위 BugerChef 예시를 보면 지금의 구현에서는 HamBurgerRecipe만을 의존할 수 있는 구조로 되어있는데 더 다양한 BurgerRecipoe를 의존 받을 수 있게 구현하려면 인터페이스로 추상화 해야 한다.

        ```java
        class BurgerChef {
            private BurgerRecipe burgerRecipe;

            public BurgerChef() {
                burgerRecipe = new HamBurgerRecipe();
                //burgerRecipe = new CheeseBurgerRecipe();
                //burgerRecipe = new ChickenBurgerRecipe();
            }
        }

        interface BugerRecipe {
            newBurger();
            // 이외의 다양한 메소드
        }

        class HamBurgerRecipe implements BurgerRecipe {
            public Burger newBurger() {
                return new HamBerger();
            }
            // ...
        }
        ```

        ### Dependency Injection은?

        - 지금까지의 구현에서는 BurgerChef 내부적으로 의존관계인 BurgerRecipe가 어떤 값을 가질지 직접 정하고 있다.
        - 즉 BurgerChef가 의존하고 있는 BurgerRecipe를 외부에서 결정하고 주입하는 것이다.

        ### 의존관계주입 세 가지 충족

        - 클래스 모델이나 코드에는 런타임 시점에 의존관계가 드러나지 않는다. 그러기 위해서는 인터페이스만 의존하고 있어야 한다.
        - 런타임 시점의 의존관계는 컨테이너나 팩토리 같은 제3의 존재가 결정한다.
        - 의전관계는 사용할 오브젝트에 대한 레퍼런스를 외부에서 제공해줌으로서 만들어진다.

        ### DI 구현 방법

        - 생성자를 이용한 구현
            - 생성자 기반의 의존성 주입 방식은 생성자의 인수를 사용하여 의존성을 주입하는 방식이다.
            - 생성자 기반 의존성 주입 방식을 사용하면 필드를 final로 선언하여 생성 후에 변경되지 않도록 만들 수 있다. 스프링 팀에서는 필드 기반 방식보다 생성자 기반 의존성 주입방식을 옹호한다.

            ```java
            //의존성 주입 대상 필드
            private BoardService service;

            //생성자를 사용한 의존성 주입
            	@Autowired
            	public BoardController(BoardService service) {
            		this.service = service;
            	}

            @Service
            public class BoardServiceImpl implements BoardService {
            //의존성 주입 대상 필드
            	private BoardDAO dao;
            //생성자를 사용한 의존성 주입
            	@Autowired
            	public BoardServiceImpl(BoardDAO dao) {
            		this.dao = dao;
            	}

            ```

            ```java
            class BurgerChef {
                private BurgerRecipe burgerRecipe;

                public BurgerChef(BurgerRecipe burgerRecipe) {
                    this.burgerRecipe = burgerRecipe;
                }
            }

            class BurgerRestaurantOwner {
                private BurgerChef burgerChef = new BurgerChef(new HamburgerRecipe());

                public void changeMenu() {
                    burgerChef = new BurgerChef(new CheeseBurgerRecipe());
                }
            }
            ```

        - 세터를 이용한 구현
            - 세터 기반의 의존성 주입 방식은 세터 메서드의 인수를 통해 의존성을 주입하는 방식이다.
            - 세터 메서드에 @Autowired 애너테이션을 지정하여 서비스 객체에 대한 의존성을 주입한다.

            ```java
            @Slf4j
            @Controller
            @RequestMapping("/board")
            public class BoardController {
            //의존성 주입 대상 필드
            	private BoardService service;
            //세터를 사용한 의존성 주입
            	@Autowired
            	public void setService(BoardService service) {
            		this.service = service;
            	}
            ```

            ```java
            class BurgerChef {
                private BurgerRecipe burgerRecipe = new HamburgerRecipe();

                public void setBurgerRecipe(BurgerRecipe burgerRecipe) {
                    this.burgerRecipe = burgerRecipe;
                }
            }

            class BurgerRestaurantOwner {
                private BurgerChef burgerChef = new BurgerChef();

                public void changeMenu() {
                    burgerChef.setBurgerRecipe(new CheeseBurgerRecipe());
                }
            }
            ```

        - 필드 기반 구현
            - 필드 기반의 의존성 주입 방식은 생성자나 세터 메서드를 사용하지 않고 DI 컨테이너의 기능을 이용하여 의존성을 주입하는 방식이다.

        @Autowired 애너테이션을 지정하여 필드에 대한 의존성을 주입한다.

        ```java
        @Autowired
        	private BoardService service;
        ```

    - 13장 세션과 쿠키
        - 13.1 로그인 처리

            ## 로그인 처리

            - 로그인 상태를 유지하기 위해서 세션을 이용한다. 이 섹션에서는 로그인 상태 정보를 세션에 저장하고 로그인된 사용자 정보를 화면에 보여주는 단순한 기능만을 구현한다.
            - 일반적으로 로그인 기능을 구현하기 위해서 세션을 직접적으로 이용하기 보다는 스프링 시큐리티와 같은 보안 프레임워크를 활용하는 것을 권장한다.

            ### 도메인 클래스 정의

            - 사용자 입력값 클래스
                - 사용자의 로그인 입력 정보를 매핑하는 클래스이다.
                - 로그인 정보를 담을 클래스
                - 유저 정보를 담을 클래스

            ### 비즈니스 클래스 정의

            - 로그인 컨트롤러 클래스
                - 사용자의 로그인 정보를 받아오는 로그인 폼 화면을 구성하고 입력된 사용자 정보를 가지고 로그인 처리한다.

            ### HttpServletRequest 활용

            - 위 객체를 활용하여 컨토롤러 메서드의 파라미터로 전달받아 세션을 처리할수 있다.
        - 13.2 로그아웃 처리